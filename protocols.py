import structimport jsonMSG_JOIN = "JOIN"MSG_WELCOME = "WELCOME"MSG_SEND_OPTION = "OPTION"MSG_SERVER_MSS = "SERVER_MSS"MSG_CHARACTER_MENU = "CHARACTER_MENU"MSG_SEND_CHARACTER = "SEND_CHARACTER"MSG_LIST_GAMES = "LIST_GAMES"MSG_SEND_GAME = "SEND_GAME"MSG_SEND_COMMAND = "SEND_COMMAND"MSG_DC_ME = "DC_ME"MSG_YOUR_TURN = "YOUR_TURN"MSG_DC_SERVER = "DC_SERVER"MSG_END_GAME = "END_GAME"MSG_LOAD_GAME = 'LOAD_GAME'class ConnectionClosed(Exception):    def __init__(self):        super().__init__("Connection closed by other")def recv_all(sock, count):    buffer = b''    while count != 0:        newbuf = sock.recv(count)        if not newbuf:            return None        buffer += newbuf        count -= len(newbuf)    return bufferdef send_one_message(sock, data):    encoded_data = json.dumps(data).encode()    length = len(encoded_data)    sock.sendall(struct.pack('!I', length))    sock.sendall(encoded_data)def recv_one_message(sock):    lengthbuf = recv_all(sock, 4)    if lengthbuf:        header = struct.unpack("!I", lengthbuf)        length = header[0]        encoded_data = recv_all(sock, length)        message = json.loads(encoded_data.decode())        return message    else:        raise ConnectionClosed()